"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/database/index.ts":
/*!***********************************!*\
  !*** ./src/lib/database/index.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   database: () => (/* binding */ database)\n/* harmony export */ });\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb */ \"(app-pages-browser)/./node_modules/idb/build/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n\n\nclass DatabaseManager {\n    async init() {\n        if (this.db) return;\n        this.db = await (0,idb__WEBPACK_IMPORTED_MODULE_0__.openDB)(this.DB_NAME, this.DB_VERSION, {\n            upgrade (db) {\n                // Create spaces store\n                const spacesStore = db.createObjectStore('spaces', {\n                    keyPath: 'id'\n                });\n                spacesStore.createIndex('by-type', 'type');\n                spacesStore.createIndex('by-updated', 'updatedAt');\n                spacesStore.createIndex('by-created', 'createdAt');\n                // Create samples store\n                const samplesStore = db.createObjectStore('samples', {\n                    keyPath: 'id'\n                });\n                samplesStore.createIndex('by-space', 'spaceId');\n                samplesStore.createIndex('by-recorded', 'recordedAt');\n                samplesStore.createIndex('by-quality', 'signalQuality');\n                samplesStore.createIndex('by-type', 'soundType');\n            }\n        });\n    }\n    ensureDB() {\n        if (!this.db) {\n            throw new Error('Database not initialized. Call init() first.');\n        }\n        return this.db;\n    }\n    // Space operations\n    async createSpace(data) {\n        const db = this.ensureDB();\n        const now = new Date();\n        const space = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n            name: data.name,\n            description: data.description,\n            type: data.type,\n            createdAt: now,\n            updatedAt: now,\n            sampleIds: [],\n            metadata: data.metadata || {},\n            environmentalConditions: data.environmentalConditions || {},\n            analyzedFrequencies: []\n        };\n        await db.add('spaces', space);\n        return space;\n    }\n    async getSpace(id) {\n        const db = this.ensureDB();\n        return await db.get('spaces', id);\n    }\n    async getAllSpaces() {\n        const db = this.ensureDB();\n        return await db.getAllFromIndex('spaces', 'by-updated');\n    }\n    async updateSpace(id, updates) {\n        const db = this.ensureDB();\n        const existing = await db.get('spaces', id);\n        if (!existing) {\n            throw new Error(\"Space with id \".concat(id, \" not found\"));\n        }\n        const updated = {\n            ...existing,\n            ...updates,\n            id: existing.id,\n            updatedAt: new Date()\n        };\n        await db.put('spaces', updated);\n        return updated;\n    }\n    async deleteSpace(id) {\n        const db = this.ensureDB();\n        try {\n            // Start a transaction that includes both stores\n            const tx = db.transaction([\n                'spaces',\n                'samples'\n            ], 'readwrite');\n            const spacesStore = tx.objectStore('spaces');\n            const samplesStore = tx.objectStore('samples');\n            // Get all samples for this space\n            const samplesIndex = samplesStore.index('by-space');\n            const samples = await samplesIndex.getAll(id);\n            // Delete all samples for this space\n            for (const sample of samples){\n                await samplesStore.delete(sample.id);\n            }\n            // Delete the space\n            await spacesStore.delete(id);\n            // Wait for transaction to complete\n            await tx.done;\n            console.log(\"Successfully deleted space \".concat(id, \" and \").concat(samples.length, \" associated samples\"));\n        } catch (error) {\n            console.error('Error deleting space:', error);\n            throw new Error(\"Failed to delete space: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async getSpaceCount() {\n        const db = this.ensureDB();\n        return await db.count('spaces');\n    }\n    // Sample operations\n    async createSample(data) {\n        const db = this.ensureDB();\n        const now = new Date();\n        const sample = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n            spaceId: data.spaceId,\n            soundType: data.soundType,\n            audioFilePath: data.audioFilePath,\n            recordedAt: now,\n            duration: data.duration,\n            ambientNoiseLevel: data.ambientNoiseLevel || 0,\n            peaks: data.peaks || [],\n            spectralData: data.spectralData || {},\n            signalQuality: data.signalQuality || 'good',\n            sampleRate: data.sampleRate || 48000,\n            recordingSettings: data.recordingSettings || {}\n        };\n        await db.add('samples', sample);\n        // Update space's sample IDs\n        const space = await this.getSpace(data.spaceId);\n        if (space) {\n            await this.updateSpace(data.spaceId, {\n                sampleIds: [\n                    ...space.sampleIds,\n                    sample.id\n                ]\n            });\n        }\n        return sample;\n    }\n    async getSample(id) {\n        const db = this.ensureDB();\n        return await db.get('samples', id);\n    }\n    async getSamplesForSpace(spaceId) {\n        const db = this.ensureDB();\n        return await db.getAllFromIndex('samples', 'by-space', spaceId);\n    }\n    async getAllSamples() {\n        const db = this.ensureDB();\n        return await db.getAllFromIndex('samples', 'by-recorded');\n    }\n    async getRecentSamples() {\n        let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 5;\n        const db = this.ensureDB();\n        const allSamples = await db.getAllFromIndex('samples', 'by-recorded');\n        return allSamples.slice(-limit).reverse();\n    }\n    async updateSample(id, updates) {\n        const db = this.ensureDB();\n        const existing = await db.get('samples', id);\n        if (!existing) {\n            throw new Error(\"Sample with id \".concat(id, \" not found\"));\n        }\n        const updated = {\n            ...existing,\n            ...updates,\n            id: existing.id\n        };\n        await db.put('samples', updated);\n        return updated;\n    }\n    async deleteSample(id) {\n        const db = this.ensureDB();\n        const sample = await db.get('samples', id);\n        if (sample) {\n            // Remove from space's sample IDs\n            const space = await this.getSpace(sample.spaceId);\n            if (space) {\n                await this.updateSpace(sample.spaceId, {\n                    sampleIds: space.sampleIds.filter((sampleId)=>sampleId !== id)\n                });\n            }\n        }\n        await db.delete('samples', id);\n    }\n    async getSampleCount() {\n        const db = this.ensureDB();\n        return await db.count('samples');\n    }\n    // Utility methods\n    async clearAllData() {\n        const db = this.ensureDB();\n        await db.clear('spaces');\n        await db.clear('samples');\n    }\n    async exportData() {\n        const spaces = await this.getAllSpaces();\n        const samples = await this.getAllSamples();\n        return {\n            spaces,\n            samples\n        };\n    }\n    async importData(data) {\n        const db = this.ensureDB();\n        // Clear existing data\n        await this.clearAllData();\n        // Import spaces\n        for (const space of data.spaces){\n            await db.add('spaces', space);\n        }\n        // Import samples\n        for (const sample of data.samples){\n            await db.add('samples', sample);\n        }\n    }\n    constructor(){\n        this.db = null;\n        this.DB_NAME = 'resonance-detector';\n        this.DB_VERSION = 1;\n    }\n}\n// Singleton instance\nconst database = new DatabaseManager();\n// Initialize database on module load\nif (true) {\n    database.init().catch(console.error);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/database/index.ts\n"));

/***/ })

});